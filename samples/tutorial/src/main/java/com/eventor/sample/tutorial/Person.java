package com.eventor.sample.tutorial;

import com.eventor.api.annotations.*;

import java.util.Date;
import java.util.Random;

@Aggregate
public class Person {
    @Id //Person identifier
    private String email;
    private String name;
    private String protectedPassword;

    private SecurityService securityService;
    private Random random = new Random();

    //securityService should be injected
    public Person(SecurityService securityService) {
        this.securityService = securityService;
    }

    @CommandHandler
    public Object handle(@IdIn("personEmail") ChangePassword cmd) {
        if (securityService.isPasswordCorrect(email, protectedPassword, cmd.oldPassword)) {
            String newProtectedPassword = securityService.protectPassword(email, cmd.newPassword);
            return new PasswordChanged(email, newProtectedPassword, new Date());
        }
        return null;
    }

    @CommandHandler
    public Object handle(@IdIn("personEmail") TryToDoGoodThink cmd) {
        switch (random.nextInt(10)) {
            case 0:
                return new NotSoGoodThingDone(email);
            case 1:
            case 2:
                return null;
            default:
                return new GoodThingDone(email, "Good thing done by " + name);
        }
    }

    @Start          //When PersonRegistered occurs new Person get created
    @EventListener  //Listening events generated by other source.
    public void on(PersonRegistered e) {
        email = e.email;
        name = e.name;
        protectedPassword = e.password;
    }

    @EventListener  //Listening events generated by current aggregate
    public void on(PasswordChanged e) {
        protectedPassword = e.newProtectedPassword;
    }
}

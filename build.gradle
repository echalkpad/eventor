import java.nio.charset.Charset

apply plugin: 'java'

sourceCompatibility = 1.6


task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
    distributionUrl = 'http://services.gradle.org/distributions/gradle-1.8-all.zip'
}

repositories {
    mavenCentral()
}

subprojects {
    group = 'com.eventor'
    version = '0.1-SNAPSHOT'
}

task generateReadme << {
    def includePrefix = "@include "
    def inps = new FileInputStream("README.template.md");
    def inp = new BufferedReader(new InputStreamReader(inps, Charset.forName("UTF-8")));
    PrintWriter out = new PrintWriter(new FileWriter("README.md"));
    def line
    while ((line = inp.readLine()) != null) {
        if (line.startsWith(includePrefix)) {
            def toIncludeIs = new BufferedReader(
                    new InputStreamReader(new FileInputStream(line.substring(includePrefix.length())),
                            Charset.forName("UTF-8")));
            while ((line = toIncludeIs.readLine()) != null) {
                if (!line.startsWith("import ") && !line.startsWith("package ")) out.println "    " + line
            }
            toIncludeIs.close()
        } else {
            out.println line
        }
    }
    out.close()
    inp.close()
}

[[':framework', 'eventor'],
        [':integration:guice', 'guice'],
        [':test-framework', 'test-framework']].each { def projName, artifactId ->
    project(projName) {
        apply plugin: 'java'
        apply plugin: 'maven'

		task sourcesJar(type: Jar, dependsOn: classes) {
			classifier = 'sources'
			from sourceSets.main.allSource
		}

		uploadArchives {
			repositories {
				mavenDeployer {
					repository(url: "file:///$rootDir/mvn-repo/")
					pom.artifactId = artifactId
				}
			}
		}

		artifacts {
			archives jar
			archives sourcesJar
		}
	}
}
